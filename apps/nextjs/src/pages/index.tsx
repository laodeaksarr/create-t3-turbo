import type { NextPage } from "next";
import Head from "next/head";
import { signIn, signOut } from "next-auth/react";
//import { RouterInputs, RouterOutputs, trpc } from "../utils/trpc";
import { formatDay, updateCache, useScrollPosition } from "@aksar/utils";
import { useQueryClient, QueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import { AiFillHeart } from "react-icons/ai";
import { RouterInputs, RouterOutputs } from "@aksar/api";
import { trpc } from "@aksar/api/src/client";

const LIMIT = 10;

const PostCard: React.FC<{
  post: RouterOutputs["post"]["infinite"]["posts"][number];
  client: QueryClient;
  input: RouterInputs["post"]["infinite"];
}> = ({ client, post, input }) => {
  const likeMutation = trpc.post.like.useMutation({
    onSuccess: (data, variables) => {
      updateCache({ client, data, variables, input, action: "like" });
    },
  }).mutateAsync;
  const unlikeMutation = trpc.post.unlike.useMutation({
    onSuccess: (data, variables) => {
      updateCache({ client, data, variables, input, action: "unlike" });
    },
  }).mutateAsync;

  const hasLiked = post.likes.length > 0;

  return (
    <div className="max-w-2xl rounded-lg border-2 border-gray-500 p-4 transition-all hover:scale-[101%]">
      <h2 className="text-2xl font-bold text-[hsl(280,100%,70%)]">
        {post.title} - {formatDay(post.createdAt).fromNow()}
      </h2>
      <p>{post.content}</p>
      <div className="mt-4 flex items-center p-2">
        <AiFillHeart
          color={hasLiked ? "red" : "gray"}
          size="1.5rem"
          onClick={() => {
            if (hasLiked) {
              unlikeMutation({
                postId: post.id,
              });
              return;
            }

            likeMutation({
              postId: post.id,
            });
          }}
        />

        <span className="text-sm text-gray-500">{post._count.likes}</span>
      </div>
    </div>
  );
};

const Home: NextPage<{ where: RouterInputs["post"]["infinite"]["where"] }> = ({
  where = {},
}) => {
  const scrollPosition = useScrollPosition();

  const { data, hasNextPage, fetchNextPage, isFetching } =
    trpc.post.infinite.useInfiniteQuery(
      { limit: LIMIT, where },
      { getNextPageParam: (lastPage) => lastPage.nextCursor },
    );

  const client = useQueryClient();

  const posts = data?.pages.flatMap((page) => page.posts) ?? [];

  useEffect(() => {
    if (scrollPosition > 90 && hasNextPage && !isFetching) {
      fetchNextPage();
    }
  }, [scrollPosition, hasNextPage, isFetching, fetchNextPage]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-8">
          <h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> Turbo
          </h1>
          <AuthShowcase />
          <div className="flex h-[60vh] justify-center overflow-y-scroll px-4 text-2xl">
            <div className="flex flex-col gap-4">
              {posts.map((p) => {
                return (
                  <PostCard
                    key={p.id}
                    post={p}
                    client={client}
                    input={{
                      where,
                      limit: LIMIT,
                    }}
                  />
                );
              })}
            </div>
            {!hasNextPage && <p>No more items to load</p>}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: session } = trpc.auth.getSession.useQuery();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: !!session?.user },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {session?.user && (
        <p className="text-center text-2xl text-white">
          {session && <span>Logged in as {session?.user?.name}</span>}
          {secretMessage && <span> - {secretMessage}</span>}
        </p>
      )}
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={session ? () => signOut() : () => signIn()}
      >
        {session ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
